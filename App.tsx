import React, { useEffect, useState } from 'react';
import { Modal, StatusBar, StyleSheet, View, Text, SafeAreaView, Platform, Linking } from 'react-native';
import FlashMessage from 'react-native-flash-message';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { colors } from './src/assects/colors';
import { width } from './src/assects/strings';
import { persistor, Store } from './src/redux/store';
import Routes from './src/routes';
import SplashScreen from './src/screens/splash';
import messaging from '@react-native-firebase/messaging';
import PushNotification from "react-native-push-notification";
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
const App = () => {

  const [splash, setSplash] = useState(true);
  const [netInfo, setNetInfo] = useState('');

  useEffect(() => {
    if (splash) {
      setTimeout(() => {
        setSplash(false)
      }, 2000);
    }
  }, [])

  useEffect(() => {
    const unsubscribe = messaging().onMessage(async remoteMessage => {
      PushNotification.localNotification({
        id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        title: remoteMessage?.notification?.title, // (optional)
        message: remoteMessage?.notification?.body, // (required)
      });
    });
    return unsubscribe;
  }, []);

  useEffect(() => {
    const handleDeepLink = async () => {
      const url = await Linking.getInitialURL();
      console.log(url);

      if (url) {
        // Handle the deep link URL
      }
    };
    handleDeepLink();
    const handleUrlChange = (event) => {
      // Handle URL changes during the app's lifecycle
      console.log(event.url);
    };
    Linking.addEventListener('url', handleUrlChange);

    return () => {
      Linking.removeEventListener('url', handleUrlChange);
    };
  }, []);

  
  
  return (
    <SafeAreaProvider style={styles.container} >
      {splash ?
        <SplashScreen /> :
        <Provider store={Store} >
          <PersistGate persistor={persistor} >
            <Routes />
            <FlashMessage animated position={"top"} />
          </PersistGate>
        </Provider>}
    </SafeAreaProvider>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1, color: colors.primaryColor
  }
})
export default App;


